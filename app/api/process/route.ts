import { NextRequest, NextResponse } from 'next/server'
import sharp from 'sharp'
import nodemailer from 'nodemailer'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'dummy-key',
})

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const text = formData.get('text') as string
    const email = formData.get('email') as string
    const photo = formData.get('photo') as File

    if (!text || !email || !photo) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Convert photo to buffer
    const photoBuffer = Buffer.from(await photo.arrayBuffer())

    // Generate thumbnail using sharp
    const thumbnail = await sharp(photoBuffer)
      .resize(400, 400, {
        fit: 'inside',
        withoutEnlargement: true,
      })
      .jpeg({ quality: 80 })
      .toBuffer()

    const thumbnailBase64 = thumbnail.toString('base64')

    // Convert original photo to base64 for OpenAI
    const photoBase64 = photoBuffer.toString('base64')

    // Generate caption using OpenAI Vision API
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: `Based on this image and the user's context: "${text}", generate a compelling, engaging caption suitable for social media. The caption should be creative, relevant, and capture the essence of the image. Keep it concise but impactful (1-3 sentences).`,
            },
            {
              type: 'image_url',
              image_url: {
                url: `data:image/jpeg;base64,${photoBase64}`,
              },
            },
          ],
        },
      ],
      max_tokens: 300,
    })

    const caption = completion.choices[0]?.message?.content || 'No caption generated'

    // Send email with nodemailer
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: false,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    })

    await transporter.sendMail({
      from: process.env.EMAIL_FROM || process.env.SMTP_USER,
      to: email,
      subject: 'Your AI-Generated Photo Caption',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #2563eb;">Your AI-Generated Caption</h1>
          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h2 style="color: #374151; margin-top: 0;">Caption:</h2>
            <p style="font-size: 16px; line-height: 1.6; color: #1f2937; font-style: italic;">
              ${caption}
            </p>
          </div>
          <div style="margin: 20px 0;">
            <h3 style="color: #374151;">Your Context:</h3>
            <p style="color: #4b5563;">${text}</p>
          </div>
          <div style="margin: 20px 0;">
            <h3 style="color: #374151;">Thumbnail:</h3>
            <img src="cid:thumbnail" alt="Photo thumbnail" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);" />
          </div>
          <p style="color: #6b7280; font-size: 14px; margin-top: 30px;">
            Generated by AI Photo Caption & Email Agent
          </p>
        </div>
      `,
      attachments: [
        {
          filename: 'thumbnail.jpg',
          content: thumbnail,
          cid: 'thumbnail',
        },
        {
          filename: 'original.jpg',
          content: photoBuffer,
        },
      ],
    })

    return NextResponse.json({
      success: true,
      caption,
      thumbnail: `data:image/jpeg;base64,${thumbnailBase64}`,
      emailSent: email,
    })
  } catch (error: any) {
    console.error('Error processing request:', error)
    return NextResponse.json(
      { error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}
